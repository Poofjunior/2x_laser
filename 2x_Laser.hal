# Generated by stepconf at Sun Aug 28 12:50:09 2011
# If you make changes to this file, they will be
# overwritten when you run stepconf again

loadrt threads name1=laser-thread period1=[EMCMOT]BASE_PERIOD

loadrt corexykins
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES

# In case the need for the original parallel port on my system arises...
#loadrt probe_parport
#loadrt hal_parport cfg="0x378 out"
#setp parport.0.reset-time 1000
#addf parport.0.read base-thread
#addf parport.0.write base-thread
#addf parport.0.reset base-thread

loadrt hostmot2
# 5i25 has flash config, assume g540x2.bit, compatible with Bart's laser board
loadrt hm2_pci config="num_encoders=0 num_pwmgens=1 num_stepgens=3 num_encoders=0 num_resolvers=0"
addf hm2_5i25.0.read servo-thread
addf hm2_5i25.0.write servo-thread
addf hm2_5i25.0.pet_watchdog servo-thread

# need capture-position in laser-thread for raster engraving:
###addf hm2_5i25.0.stepgen.capture-position laser-thread

addf motion-command-handler servo-thread
addf motion-controller servo-thread

########################

# use mult2 + blend to map 0..100% power at "M68 E0 Qxxx" to the PWM output
# range that gives minimum to full laser power
loadrt blend names=scaled_power
loadrt mult2 names=percent_power
addf percent_power servo-thread
addf scaled_power servo-thread
setp percent_power.in0 0.01
net laser-power-pct <= motion.analog-out-00 => percent_power.in1
setp scaled_power.in1 [LASER]POWER_PWM_MAX 
setp scaled_power.in2 [LASER]POWER_PWM_MIN 
setp scaled_power.open 0
net laser-power-frac <= percent_power.out => scaled_power.select

net laser-power-cmd <= scaled_power.out => hm2_5i25.0.pwmgen.00.value
setp hm2_5i25.0.pwmgen.pwm_frequency 20000
setp hm2_5i25.0.pwmgen.pdm_frequency 20000
setp hm2_5i25.0.pwmgen.00.enable 1
setp hm2_5i25.0.pwmgen.00.scale 1
setp hm2_5i25.0.pwmgen.00.output-type 1

########################

net dout-02 <= motion.digital-out-02
net din-02 => motion.digital-in-02

net laser-chiller => hm2_5i25.0.gpio.000.out
setp hm2_5i25.0.gpio.000.is_output 1
# xdir invert
setp hm2_5i25.0.gpio.004.invert_output 1
# ydir invert
setp hm2_5i25.0.gpio.008.invert_output 1
# udir invert
setp hm2_5i25.0.gpio.010.invert_output 1

net dout-02 => hm2_5i25.0.gpio.011.out
setp hm2_5i25.0.gpio.011.is_output 1
net xenable => hm2_5i25.0.gpio.005.out
setp hm2_5i25.0.gpio.005.is_output 1
net laser-final => hm2_5i25.0.gpio.007.out
setp hm2_5i25.0.gpio.007.is_output 1

net home-x <= hm2_5i25.0.gpio.013.in_not
setp hm2_5i25.0.gpio.013.is_output 0
net home-y <= hm2_5i25.0.gpio.014.in_not
setp hm2_5i25.0.gpio.014.is_output 0

net din-02 <= hm2_5i25.0.gpio.016.in
setp hm2_5i25.0.gpio.016.is_output 0

setp hm2_5i25.0.stepgen.00.position-scale [AXIS_0]SCALE
setp hm2_5i25.0.stepgen.00.steplen [STEPPER_DRIVER]STEPLEN
setp hm2_5i25.0.stepgen.00.stepspace [STEPPER_DRIVER]STEPSPACE
setp hm2_5i25.0.stepgen.00.dirsetup [STEPPER_DRIVER]DIRSETUP
setp hm2_5i25.0.stepgen.00.dirhold [STEPPER_DRIVER]DIRHOLD
setp hm2_5i25.0.stepgen.00.maxaccel [AXIS_0]STEPGEN_MAXACCEL
setp hm2_5i25.0.stepgen.00.maxvel [AXIS_0]MAX_VELOCITY
net xpos-cmd axis.0.motor-pos-cmd => hm2_5i25.0.stepgen.00.position-cmd
net xpos-fb hm2_5i25.0.stepgen.00.position-fb => axis.0.motor-pos-fb
net xenable axis.0.amp-enable-out => hm2_5i25.0.stepgen.00.enable
net home-x => axis.0.home-sw-in

setp hm2_5i25.0.stepgen.01.position-scale [AXIS_1]SCALE
setp hm2_5i25.0.stepgen.01.steplen [STEPPER_DRIVER]STEPLEN
setp hm2_5i25.0.stepgen.01.stepspace [STEPPER_DRIVER]STEPSPACE
setp hm2_5i25.0.stepgen.01.dirsetup [STEPPER_DRIVER]DIRSETUP
setp hm2_5i25.0.stepgen.01.dirhold [STEPPER_DRIVER]DIRHOLD
setp hm2_5i25.0.stepgen.01.maxaccel [AXIS_1]STEPGEN_MAXACCEL
setp hm2_5i25.0.stepgen.01.maxvel [AXIS_1]MAX_VELOCITY
net ypos-cmd axis.1.motor-pos-cmd => hm2_5i25.0.stepgen.01.position-cmd
net ypos-fb hm2_5i25.0.stepgen.01.position-fb => axis.1.motor-pos-fb
net yenable <= axis.1.amp-enable-out => hm2_5i25.0.stepgen.01.enable
net home-y => axis.1.home-sw-in

setp hm2_5i25.0.stepgen.02.position-scale [AXIS_6]SCALE
setp hm2_5i25.0.stepgen.02.steplen [STEPPER_DRIVER]STEPLEN
setp hm2_5i25.0.stepgen.02.stepspace [STEPPER_DRIVER]STEPSPACE
setp hm2_5i25.0.stepgen.02.dirsetup [STEPPER_DRIVER]DIRSETUP
setp hm2_5i25.0.stepgen.02.dirhold [STEPPER_DRIVER]DIRHOLD
setp hm2_5i25.0.stepgen.02.maxaccel [AXIS_6]STEPGEN_MAXACCEL
setp hm2_5i25.0.stepgen.02.maxvel [AXIS_6]MAX_VELOCITY
net upos-cmd axis.6.motor-pos-cmd => hm2_5i25.0.stepgen.02.position-cmd
net upos-fb hm2_5i25.0.stepgen.02.position-fb => axis.6.motor-pos-fb
net uenable <= axis.6.amp-enable-out => hm2_5i25.0.stepgen.02.enable

# Z is fake so that router/mill CAM can work, see "magic-z"
net zpos-cmd-fb <= axis.2.motor-pos-cmd => axis.2.motor-pos-fb

net estop-out <= iocontrol.0.user-enable-out
net estop-out => iocontrol.0.emc-enable-in

net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed
net tool-prepare-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared

########################

# M3/M5, not realtime/coordinated but master on/off:
net laser-master <= motion.spindle-on

# M62/M63 coordinated or M64/M65 immediate firing:
net laser-dout <= motion.digital-out-00

########################

loadrt laserfreq
addf laserfreq.0.make-pulses laser-thread
addf hm2_5i25.0.write_gpio laser-thread
addf laserfreq.0.update servo-thread
setp laserfreq.0.duration [LASER]PULSED_CUT_DURATION
setp laserfreq.0.min-off-duration [LASER]PULSED_CUT_CONTINUOUS
net current-vel motion.current-vel => laserfreq.0.velocity
net laser-freq motion.spindle-speed-out => laserfreq.0.pulse-per-unit
#net laser-dout => laserfreq.0.enable
setp laserfreq.0.enable 1
net laser-pulsed <= laserfreq.0.pulse

########################

# XXX configurable axis 0

# Compute motion-offset by observing how it affects the cmd so we can
# apply it manually to the fb.  That allows us to use axis.0.position-fb
# directly (at base-thread rate) rather than waiting for servo-thread
# do do the same math and give us axis.N.joint-pos-fb
loadrt sum2 names=motion-offset-sub,motion-offset-apply
addf motion-offset-sub servo-thread
setp motion-offset-sub.gain1 -1
net xpos-jcmd axis.0.joint-pos-cmd => motion-offset-sub.in0
net xpos-cmd  axis.0.motor-pos-cmd => motion-offset-sub.in1
net motion-offset                  <= motion-offset-sub.out

addf motion-offset-apply laser-thread
net xpos-fb       => motion-offset-apply.in0
net motion-offset => motion-offset-apply.in1
net raster-pos-fb <= motion-offset-apply.out


loadrt comp names=raster-pos-gt-comp,laser-magic-z-comp
loadrt lut5 names=raster-read-lut,raster-fire-lut,laser-final-lut

loadrt streamer depth=256 cfg=bbf

# The order of addf determines the order of execution.
# Order these so that the inputs cascade correctly to the outputs:
addf raster-pos-gt-comp laser-thread
addf raster-read-lut laser-thread
addf streamer.0 laser-thread
addf raster-fire-lut laser-thread
addf laser-final-lut laser-thread

net raster-fire  <= streamer.0.pin.0
net raster-rev   <= streamer.0.pin.1
net raster-pos   <= streamer.0.pin.2
net raster-empty <= streamer.0.empty
net raster-read  => streamer.0.enable

# has the raster reached the target?
# raster-pos-gt := raster-pos-fb > raster-pos
net raster-pos     => raster-pos-gt-comp.in0
net raster-pos-fb  => raster-pos-gt-comp.in1
net raster-pos-gt  <= raster-pos-gt-comp.out

# equation for reading the stream:
# 1) XXX you can't avoid reading when empty or the state never changes
# 2) flush (read all) when not running (M5 / laser-master off)
# 3) when the laser position passes the target position in the right direction
# raster-read := (~laser-master | (raster-pos-gt ^ raster-rev))
#setp raster-read-lut.function 0x15511551 (with raster-empty)
setp raster-read-lut.function 0x3ff33ff3
net raster-empty  => raster-read-lut.in-0
net laser-master  => raster-read-lut.in-1
net raster-pos-gt => raster-read-lut.in-2
net raster-rev    => raster-read-lut.in-3
net raster-read   <= raster-read-lut.out

# equation for firing the laser:
# 1) never fire when empty (underflow or job finished)
# 2) fire when raster-fire enabled
# laser-raster := ~raster-empty & raster-fire
setp raster-fire-lut.function 0x44444444
net raster-empty => raster-fire-lut.in-0
net raster-fire  => raster-fire-lut.in-1
net laser-raster <= raster-fire-lut.out

########################

addf laser-magic-z-comp servo-thread
net zpos-fb <= axis.2.joint-pos-fb => laser-magic-z-comp.in0
setp laser-magic-z-comp.in1 0.0
net laser-magic-z <= laser-magic-z-comp.out

########################

# Final laser equation:  When laser-master is enabled (M3) fire for
# raster or at pulse rate when cutting:
#
# laser-final <= laser-master &
#                    (laser-raster |
#                   ((laser-magic-z | laser-dout) & laser-pulsed))

setp laser-final-lut.function 0xfeaa0000
net  laser-raster      => laser-final-lut.in-0
net  laser-dout        => laser-final-lut.in-1
net  laser-magic-z     => laser-final-lut.in-2
net  laser-pulsed      => laser-final-lut.in-3
net  laser-master      => laser-final-lut.in-4
net laser-final <= laser-final-lut.out

########################
# chiller/assist-air control

loadrt oneshot names=laser-chiller-oneshot
loadrt or2 names=laser-chiller-or
addf laser-chiller-oneshot servo-thread
addf laser-chiller-or servo-thread

net laser-master        => laser-chiller-oneshot.in
net laser-chiller-extra <= laser-chiller-oneshot.out
setp laser-chiller-oneshot.retriggerable 1
setp laser-chiller-oneshot.width [LASER]EXTRA_CHILLER_TIME
setp laser-chiller-oneshot.rising 0
setp laser-chiller-oneshot.falling 1

net laser-master        => laser-chiller-or.in0
net laser-chiller-extra => laser-chiller-or.in1
net laser-chiller       <= laser-chiller-or.out
